{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c0\c0;}
\margl1440\margr1440\vieww13260\viewh13500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Part A\
\
1. List total number of customers living in California\
db.customers.find(\{ District:"California"\}).count()\
\
2. List all movies that are rated NC-17\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \CocoaLigature0 db.films.find(\{Rating:"NC-17"\},\{"Title":1, "_id": 0\})\
\cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 3. List the count of movies by category\
db.films.aggregate([\{'$group':\{'_id':"$Category","count":\{'$sum':1\}\}\}])\
\
4. Find the top 2 movies with movie length greater than 25mins or which has commentaries AS a special features\
db.films.find(\{$or:[\{qty:\{$gt:25\}\},\{"Special Features":"Commentaries"\}]\},\{"Title":1, "_id": 0 \}).limit(2)\
#assumed that the first two are wanted without sorting beforehand\
\
5. Provide 2 additional queries and indicate the specific business use cases they address\
5. a. To understand the inventory better, we look at the number of movies by replacement cost\
db.films.aggregate([\{$group : \{_id:"$Replacement Cost", count:\{'$sum':1\}\}\}])\
\
5. b. A person named Betty from California forgot his wallet in the store, find her phone number to contact her\
db.customers.find(\{"First Name":"ALICE","District":"California"\},\{"Phone":1\})\
\
\
Part B\
\
6. Find all Producers that produced the movie When Harry Met Sally\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
MATCH (Harry \{title: "When Harry Met Sally"\})<-[:PRODUCED]-(producers) RETURN producers.name\kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
7. Find directors who have directed more than 2 movies\
MATCH(directors:Person)-[:DIRECTED]->(movie:Movie) WITH directors, COUNT(movie) AS movie_count WHERE movie_count>2 RETURN directors.name, movie_count\
\
8. Find the actors with 5+ movies, and the movies in which they acted\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb3 MATCH (actor:Person)-[:ACTED_IN]->(m:Movie) WITH actor, collect(m.title) AS movies WHERE length(movies) >5 RETURN actor, movies\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb1 \
9. Movies and actors exactly 3 "hops" away from the movie Hoffa\
MATCH (hoffa:Movie \{title:"Hoffa"\})-[*1..3]-(hollywood) RETURN DISTINCT hollywood\
\
10. Provide 2 additional queries and indicate the specific business use cases they address\
10. a. Find movies 2 \'93hops\'94 away from the movie The Matrix to suggest new movies to a viewer that she may like\
MATCH (matrix:Movie \{title:"The Matrix"\})-[*1..2]-(hollywood) WHERE matrix <> hollywood AND hollywood.title IS NOT NULL RETURN DISTINCT hollywood.title\
\
10. b.  Find movies 2 \'93hops\'94 away from the movie V for Vendetta to suggest new movies to a viewer that she may like\
MATCH (vendetta:Movie \{title:"V for Vendetta"\})-[*1..2]-(hollywood) WHERE vendetta <> hollywood AND hollywood.title IS NOT NULL RETURN DISTINCT hollywood.title\
}